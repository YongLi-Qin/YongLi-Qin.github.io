I"<h1 id="-about-redux">📝 About Redux</h1>

<p>Understand What It Is, Why It Matters, and How It Works</p>

<hr />

<h2 id="-introduction">✅ Introduction</h2>

<p>Redux provides a <strong>centralized store</strong> to hold all <strong>application state</strong>.<br />
Instead of each component managing its own <strong>local state</strong> and passing data via <strong>props</strong>,<br />
Redux allows components to <strong>read</strong> and <strong>update shared global state</strong> in a <strong>consistent and scalable way</strong>.</p>

<p>👉 For example, the <strong>shopping cart</strong> in an e-commerce website is typically managed with Redux, since it needs to be <strong>accessible and modifiable</strong> from multiple pages like the <em>product list</em>, <em>cart page</em>, and <em>checkout</em>.</p>

<hr />

<h2 id="-core-concepts">🔁 Core Concepts</h2>

<p>Redux has three main building blocks:</p>

<table>
  <thead>
    <tr>
      <th><strong>Concept</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">Store</code></td>
      <td>Holds the application’s state (like a central database in memory)</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Action</code></td>
      <td>A plain JavaScript object that describes what happened</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">Reducer</code></td>
      <td>A pure function that determines how state changes in response to an action</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="-why-use-redux">✅ Why Use Redux?</h2>

<p>Redux offers a number of benefits, especially for medium to large-scale applications:</p>

<ul>
  <li>✅ <strong>Centralized state management</strong> — all application state is stored in a single place, making it easier to access and manage.</li>
  <li>✅ <strong>Avoid deeply nested props passing</strong> (a.k.a. <em>“prop drilling”</em>) — no need to pass data through multiple layers of components.</li>
  <li>✅ <strong>Share state across distant components</strong> — such as sharing cart data between the navbar and the checkout page.</li>
  <li>✅ <strong>Debuggable via Redux DevTools</strong> — track every state change over time and replay actions for debugging.</li>
  <li>✅ <strong>Separate state logic from UI logic</strong> — improves code clarity and reusability.</li>
  <li>✅ <strong>Easy to reason about</strong> — the strict unidirectional data flow makes the application behavior more understandable.</li>
</ul>

<hr />

<h2 id="️-redux-workflow-in-react">🛠️ Redux Workflow in React</h2>

<p>Here’s a typical step-by-step workflow for using Redux in a React application:</p>

<ol>
  <li>
    <p><strong>Create a Redux store</strong><br />
Use <code class="highlighter-rouge">configureStore()</code> from Redux Toolkit to initialize the global store that will hold your entire app’s state.</p>
  </li>
  <li><strong>Create a slice (module of state)</strong><br />
Use <code class="highlighter-rouge">createSlice()</code> to define:
    <ul>
      <li>the initial state</li>
      <li>reducer functions (how state changes)</li>
      <li>automatically generated action creators</li>
    </ul>
  </li>
  <li>
    <p><strong>Provide the store to your app</strong><br />
Wrap your React app with <code class="highlighter-rouge">&lt;Provider store={store}&gt;</code> so all components can access the Redux store.</p>
  </li>
  <li>
    <p><strong>Dispatch actions from components</strong><br />
Use <code class="highlighter-rouge">useDispatch()</code> to trigger an action, like <code class="highlighter-rouge">dispatch(addToCart(product))</code>.</p>
  </li>
  <li>
    <p><strong>Reducers handle actions and update the state</strong><br />
Redux automatically calls the corresponding reducer function, which returns a new state.</p>
  </li>
  <li>
    <p><strong>Components read updated state</strong><br />
Use <code class="highlighter-rouge">useSelector()</code> to read specific slices of state (e.g., <code class="highlighter-rouge">state.cart.items</code>). When state changes, components re-render automatically.</p>
  </li>
  <li><strong>(Optional) Use middleware for async logic</strong><br />
Use <code class="highlighter-rouge">redux-thunk</code> or <code class="highlighter-rouge">redux-saga</code> if you need to handle side effects like API calls.</li>
</ol>

<hr />

<h2 id="-for-example-managing-a-shopping-cart">🛒 For Example: Managing a Shopping Cart</h2>

<p>In an e-commerce application, the shopping cart is a perfect use case for Redux:</p>

<ul>
  <li>🧩 Multiple pages (Product List, Cart Page, Checkout Page) all need access to the cart</li>
  <li>🔄 You want to update cart state from any page</li>
  <li>🚀 You want cart data to persist as users navigate</li>
</ul>

<p>Redux lets you:</p>

<ul>
  <li>🗂️ Store cart items in a centralized state (<code class="highlighter-rouge">store.cart.items</code>)</li>
  <li>➕ Add to cart using <code class="highlighter-rouge">dispatch(addToCart(product))</code></li>
  <li>❌ Remove or clear cart with dedicated actions like <code class="highlighter-rouge">dispatch(removeFromCart(id))</code></li>
  <li>👀 Access cart data anywhere using <code class="highlighter-rouge">useSelector((state) =&gt; state.cart.items)</code></li>
</ul>

<p>🎯 With Redux, your shopping cart logic becomes <strong>cleaner</strong>, <strong>centralized</strong>, and <strong>decoupled</strong> from individual components — making your application easier to scale and maintain.</p>

<hr />

:ET