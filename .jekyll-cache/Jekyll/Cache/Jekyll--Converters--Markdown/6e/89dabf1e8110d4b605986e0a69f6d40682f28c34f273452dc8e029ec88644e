I"<h2 id="-what-is-custom-hook">📘 What is Custom Hook?</h2>

<p>A Custom Hook in React is a reusable function that starts with the prefix use and leverages one or more built-in React Hooks (like useState, useEffect, etc.) to encapsulate and share stateful logic between components, without dealing with any UI rendering.</p>

<hr />

<h2 id="️-key-characteristics">⚠️ Key characteristics:</h2>
<ul>
  <li>Must start with use (e.g., useFetch, useForm, useTimer)</li>
  <li>Can call other Hooks inside</li>
  <li>Returns values or functions (not JSX)</li>
  <li>Encourages logic reuse and separation of concerns</li>
</ul>

<h2 id="-why-we-need-to-use-custom-hook">❓ Why we need to use Custom Hook?</h2>

<p>Custom Hooks are used to encapsulate reusable logic in React. Instead of copying and pasting the same useEffect, useState, or fetch code across multiple components, you write it once as a function — a Custom Hook — and reuse it everywhere.</p>

<hr />

<h2 id="-why-does-it-matter">💡 Why Does It Matter?</h2>

<p>React re-renders components in response to state or props changes. If async logic is not properly handled, it can lead to:</p>

<ul>
  <li>⚠️ <strong>Memory leaks</strong> – calling <code class="highlighter-rouge">setState</code> after a component unmounts</li>
  <li>⚠️ <strong>Race conditions</strong> – older requests overriding newer ones</li>
  <li>⚠️ <strong>UI inconsistencies</strong> – mismatched loading/spinner states</li>
  <li>⚠️ <strong>Redundant fetches</strong> – unnecessary requests slowing down performance</li>
  <li>⚠️ <strong>Poor user experience</strong> – freezing UIs or confusing data displays</li>
</ul>

<hr />

<h2 id="️-how-to-handle-asynchronous-operations-properly">⚙️ How to Handle Asynchronous Operations Properly</h2>

<h3 id="1-use-useeffect-with-async-functions-correctly">1. Use <code class="highlighter-rouge">useEffect</code> with Async Functions (Correctly)</h3>

<p>```js
useEffect(() =&gt; {
  const fetchData = async () =&gt; {
    const res = await fetch(‘/api/data’);
    const json = await res.json();
    setData(json);
  };
  fetchData();
}, []);</p>
:ET