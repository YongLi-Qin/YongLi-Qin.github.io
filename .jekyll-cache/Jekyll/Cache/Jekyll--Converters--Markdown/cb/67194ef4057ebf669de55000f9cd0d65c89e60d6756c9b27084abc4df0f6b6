I"î	<h1 id="-what-is-usememo">üß† What is useMemo?</h1>
<ul>
  <li>useMemo is a React Hook that lets you memoize the result of a calculation between renders.</li>
  <li>Syntax and usage</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">memoizedValue</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">computeExpensiveValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div>
<ul>
  <li>computeExpensiveValue(a, b) is the function doing heavy work</li>
  <li>[a, b] is the dependency array ‚Äî React will only re-run the function when a or b changes</li>
  <li>The result is cached across renders to avoid recomputation</li>
</ul>

<h1 id="-what-is-usecallback">üîÅ What is useCallback?</h1>
<ul>
  <li>
    <p>useCallback is a React Hook that returns a memoized version of the callback function you pass in. The function will only be recreated if one of the dependencies has changed.</p>
  </li>
  <li>Syntax and usage
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">memoizedCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">])</span>
</code></pre></div>    </div>
  </li>
  <li>() =&gt; doSomething(a, b) is the function we want to memoize.</li>
</ul>

<p>-[a, b] is the dependency array. React will return the same function reference across renders unless a or b changes.</p>

<ul>
  <li>This helps prevent function reference changes, which can trigger unnecessary re-renders in child components (especially when using React.memo).</li>
</ul>
:ET