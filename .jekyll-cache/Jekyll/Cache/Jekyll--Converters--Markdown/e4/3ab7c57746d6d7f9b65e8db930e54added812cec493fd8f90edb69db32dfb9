I"6-<p>Nowaday, using docker with kubernetes as the deployment tools is more and more popular. This exploration document here will mainly focuse on <strong>how</strong> we use docker and kubernetes to deploy a simple service (fully local, yes even the cluster we going to use in kubernetes is in local as well ü•≥)</p>

<p><br /></p>
<h1 id="agenda">Agenda</h1>
<ul>
  <li><a href="#Develop a simply service">Develop a simply service</a></li>
  <li><a href="#Create image for this service">Create image for this service</a></li>
  <li><a href="#Using docker image to deploy the service">Using docker image to deploy the service</a></li>
</ul>

<hr />

<p>¬†</p>
<h1 id="develop-a-simple-service">Develop a simple service</h1>
<h3 id="prerequires">Prerequires</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir ping-service
cd ping-service
go mod init main
touch main.go
</code></pre></div></div>
<h3 id="implementation">Implementation</h3>
<p>Ping service is a good example as a simple service. Requirement for ping service is it keeps sending get request to a url provided. If there is no error happens, then log the url. Otherwise, log the error it gets. Also we want to stop the pogram when it received unix signals like SIGTERM or SIGINT</p>

<p><ins>golang code</ins>:</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>

	<span class="c">// Get url from env</span>
	<span class="n">url</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"URL"</span><span class="p">)</span>

    <span class="c">// Use go channel to ping url</span>
	<span class="k">go</span> <span class="n">pingUrl</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

    <span class="c">// Stop while </span>
	<span class="n">stop</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>

	<span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">stop</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>

	<span class="o">&lt;-</span><span class="n">stop</span>

	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Shut down"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">//  Function which to keep sending get request to url provided and with 10 seconds sleep before next request</span>
<span class="k">func</span> <span class="n">pingUrl</span><span class="p">(</span><span class="n">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span>
		<span class="p">}</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">10</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="test-to-run">Test to run:</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">URL</span><span class="o">=</span>http://www.google.com go run main.go
</code></pre></div></div>
<p><img src="https://typora-1302119905.cos.ap-nanjing.myqcloud.com/Coding/Ping-Service.png" alt="" /></p>

<hr />

<p>¬†</p>
<h1 id="create-image-for-this-service">Create image for this service</h1>
<h3 id="prerequires-1">Prerequires</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch dockerfile
</code></pre></div></div>

<h3 id="implementation-1">Implementation</h3>
<p>After we have a runable service, the next setp is to create image for this service.</p>

<p><ins>dockfile</ins></p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> golang:1.16-alpine # Specific a base image to use, all following command is running under this base image. Here we use golang image cause our project is written in golang</span>

<span class="k">WORKDIR</span><span class="s"> /app # Create a default directory, it it also the default destination for following command</span>

<span class="k">COPY</span><span class="s"> . /app # Copy the whole project to the image, this could be "COPY . ./" as well, cause we already set up /app as the default destination</span>

<span class="k">RUN </span>go build <span class="nt">-o</span> /ping-service <span class="c"># Compile the go program and the application binary name is "ping-service"</span>

<span class="k">CMD</span><span class="s"> [ "/ping-service" ] # Run ping-service which we compiled in previous step</span>
</code></pre></div></div>

<p><ins>build the image</ins></p>

<p>Specific the image name and version in format of {image_name:image_version} after ‚Äìtag (if only specific the image_name, then its tag will be latest as default). At the end, speficic the path of where dockerfile is.</p>
<pre><code class="language-command">docker build --tag ping-service .

docker images | grep "ping-service"
</code></pre>
<p><img src="https://typora-1302119905.cos.ap-nanjing.myqcloud.com/Coding/Ping-service-build-image.png" alt="" /></p>

<p><ins>test to run the image</ins></p>

<p>After we created the image, can eaisly test if the image is doing what we want to do by running the image locally</p>
<pre><code class="language-command">docker run --env URL=http://www.google.com ping-service
</code></pre>
<p><img src="https://typora-1302119905.cos.ap-nanjing.myqcloud.com/Coding/Ping-service-run-image.png" alt="" /></p>

<hr />

<p>¬†</p>
<h1 id="deploy-the-service-using-the-created-image-in-k8s">Deploy the service using the created image in K8S</h1>

<h3 id="prerequires-2">Prerequires</h3>
<p><ins>using ‚Äúkind‚Äù to setup your cluster locally</ins></p>

<p>Follow the instruction <a href="https://kind.sigs.k8s.io/docs/user/quick-start/">here</a> to setup cluster locally.</p>

<p>Once your cluster setup, confirm by <code class="highlighter-rouge">kubectl cluster-info</code></p>

<p><img src="https://typora-1302119905.cos.ap-nanjing.myqcloud.com/Coding/Ping-service-kind-cluster.png" alt="" /></p>

<p><ins>load image to cluster</ins></p>

<p>Cause we didn‚Äôt push our image to docker hub. To let the cluster able to pull the image we want while deploying the service, we need to load the image to the cluster first.</p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ping-service is the image you want to load into the cluster. Specific the name of cluster after --name</span>
kind load docker-image ping-service  --name kind
</code></pre></div></div>

<h3 id="implementation-2">Implementation</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>touch ping-service.yml
</code></pre></div></div>
<p><ins>configuration of the deployment</ins></p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>

<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>

<span class="na">metadata</span><span class="pi">:</span>

  <span class="na">name</span><span class="pi">:</span> <span class="s">ping-service-deployment</span>

  <span class="na">labels</span><span class="pi">:</span>

    <span class="na">app</span><span class="pi">:</span> <span class="s">ping-service</span>

<span class="na">spec</span><span class="pi">:</span>

  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>

  <span class="na">selector</span><span class="pi">:</span>

    <span class="na">matchLabels</span><span class="pi">:</span>

      <span class="na">app</span><span class="pi">:</span> <span class="s">ping-service</span>

  <span class="na">template</span><span class="pi">:</span>

    <span class="na">metadata</span><span class="pi">:</span>

      <span class="na">labels</span><span class="pi">:</span>

        <span class="na">app</span><span class="pi">:</span> <span class="s">ping-service</span>

    <span class="na">spec</span><span class="pi">:</span>

      <span class="na">containers</span><span class="pi">:</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app</span>

        <span class="na">image</span><span class="pi">:</span> <span class="s">ping-service</span> <span class="c1"># specific the image </span>
        <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>

        <span class="na">env</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">URL</span> <span class="c1"># specific the env value needed</span>
            <span class="na">value</span><span class="pi">:</span> <span class="s">http://www.google.com</span>

</code></pre></div></div>
<p><ins>apply deployment</ins></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> ./ping-service.yml

kubectl get pods <span class="c"># check if the service is running as expected</span>

kubectl logs <span class="o">{</span>pod-name<span class="o">}</span> <span class="nt">-f</span> <span class="c"># check the log</span>
</code></pre></div></div>
<p><img src="https://typora-1302119905.cos.ap-nanjing.myqcloud.com/Coding/Ping-serevice-final.png" alt="" /></p>

<p>After this, you get a existing ping-service running in your local which using K8S and based on the docker image you compiled. WoW</p>

<hr />
<h3 id="referenece">Referenece</h3>
<p><a href="https://docs.docker.com/language/golang/build-images/">Build your Go image</a></p>

<p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">K8S deployments</a></p>

<p><a href="https://kind.sigs.k8s.io/docs/user/quick-start/">Use kind to setup a cluster locally</a></p>
:ET