I"6+<p>When I was tackling <a href="https://leetcode.com/problems/group-anagrams/description/">this</a> leetcode question by Golang, I found there are actually way many ways to concatenate string in Golang. That’s why I want to write this post to demonstrate some of them and how I compare them to figure out which one is faster or more efficient.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">concatenatestr</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"bytes"</span>
	<span class="s">"fmt"</span>
	<span class="s">"strings"</span>
	<span class="s">"testing"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">strs</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
	<span class="s">"The quick brown fox jumps over the lazy dog."</span><span class="p">,</span>
	<span class="s">"Lorem ipsum dolor sit amet, consectetur adipiscing elit."</span><span class="p">,</span>
	<span class="s">"Go is an amazing programming language for concurrency."</span><span class="p">,</span>
	<span class="s">"This benchmark will test different string concatenation methods."</span><span class="p">,</span>
	<span class="s">"Optimizing memory allocation can improve performance."</span><span class="p">,</span>
	<span class="s">"Strings in Go are immutable, making efficient concatenation tricky."</span><span class="p">,</span>
	<span class="s">"The builder pattern helps in reducing memory allocations."</span><span class="p">,</span>
	<span class="s">"Testing with real-world data provides better insights."</span><span class="p">,</span>
	<span class="s">"Performance benchmarks should be reproducible and fair."</span><span class="p">,</span>
	<span class="s">"Using a buffer reduces the overhead of repeated allocations."</span><span class="p">,</span>
	<span class="s">"Code readability is just as important as performance."</span><span class="p">,</span>
	<span class="s">"Profiling helps in identfying bottlenecks in code."</span><span class="p">,</span>
	<span class="s">"Choosing the right algorithm is crucial for efficiency."</span><span class="p">,</span>
	<span class="s">"A well-structured program is easier to maintain."</span><span class="p">,</span>
	<span class="s">"Concurrency in Go is powered by goroutines and channels."</span><span class="p">,</span>
	<span class="s">"Using `b.ReportAllocs()` helps measure memory usage in benchmarks."</span><span class="p">,</span>
	<span class="s">"Refactoring code can lead to better performance and clarity."</span><span class="p">,</span>
	<span class="s">"Immutable data structures have their pros and cons."</span><span class="p">,</span>
	<span class="s">"Memory leaks can be avoided with proper resource management."</span><span class="p">,</span>
	<span class="s">"Effective debugging saves a lot of development time."</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkPlusOperator</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">b</span><span class="o">.</span><span class="n">Loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">res</span> <span class="o">:=</span> <span class="s">""</span>
		<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">strs</span> <span class="p">{</span>
			<span class="n">res</span> <span class="o">+=</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">b</span><span class="o">.</span><span class="n">ReportAllocs</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkSprintf</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">b</span><span class="o">.</span><span class="n">Loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">res</span> <span class="o">:=</span> <span class="s">""</span>
		<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">strs</span> <span class="p">{</span>
			<span class="n">res</span> <span class="o">=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s%s"</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">b</span><span class="o">.</span><span class="n">ReportAllocs</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkStringsJoin</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">b</span><span class="o">.</span><span class="n">Loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">res</span> <span class="o">:=</span> <span class="s">""</span>
		<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">strs</span> <span class="p">{</span>
			<span class="n">res</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="n">res</span><span class="p">,</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">]},</span> <span class="s">""</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">b</span><span class="o">.</span><span class="n">ReportAllocs</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkStringsBuilder</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">b</span><span class="o">.</span><span class="n">Loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">sb</span> <span class="n">strings</span><span class="o">.</span><span class="n">Builder</span>
		<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">strs</span> <span class="p">{</span>
			<span class="n">sb</span><span class="o">.</span><span class="n">WriteString</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
		<span class="p">}</span>
		<span class="n">sb</span><span class="o">.</span><span class="n">String</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="n">b</span><span class="o">.</span><span class="n">ReportAllocs</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkBytesWriteString</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">b</span><span class="o">.</span><span class="n">Loop</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">buf</span> <span class="n">bytes</span><span class="o">.</span><span class="n">Buffer</span>
		<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">strs</span> <span class="p">{</span>
			<span class="n">buf</span><span class="o">.</span><span class="n">WriteString</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
		<span class="p">}</span>
		<span class="n">buf</span><span class="o">.</span><span class="n">String</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="n">b</span><span class="o">.</span><span class="n">ReportAllocs</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<p>In summary of the above code, I’m comparing 5 different ways to combine strings:</p>

<ol>
  <li>Simple plus operator.</li>
  <li>Using <code class="highlighter-rouge">fmt.Sprintf()</code>, which is used to format a string with placeholders and values.</li>
  <li>String join, joining a slice of strings to concatenate multiple strings.</li>
  <li>Using <code class="highlighter-rouge">strings.Builder</code>, introduced in Go 1.10, which is used to manipulate UTF-8 encoded strings.</li>
  <li>Using <code class="highlighter-rouge">bytes.Buffer</code>, which maintains a list of bytes and has the <code class="highlighter-rouge">WriteString</code> function to add strings to the byte slice.</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>goos: darwin
goarch: arm64
pkg: concatenate-str
cpu: Apple M4 Pro
BenchmarkPlusOperator-2          1071540              1104 ns/op           12272 B/op         19 allocs/op
BenchmarkSprintf-2                633754              1908 ns/op           12946 B/op         59 allocs/op
BenchmarkStringsJoin-2            911908              1257 ns/op           12320 B/op         20 allocs/op
BenchmarkStringsBuilder-2        4109606               295.8 ns/op          2752 B/op          6 allocs/op
BenchmarkBytesWriteString-2      2287969               524.8 ns/op          5184 B/op          7 allocs/op
PASS
ok      concatenate-str 6.789s
</code></pre></div></div>

<p>As you can see, using some packages from Golang like <code class="highlighter-rouge">strings.Builder</code> and <code class="highlighter-rouge">bytes.Buffer</code> is much faster than other approaches. The fastest one is <code class="highlighter-rouge">strings.Builder</code>, which is almost 4 times faster than the plus operator and <code class="highlighter-rouge">strings.Join</code>, and 6 times faster than <code class="highlighter-rouge">fmt.Sprintf()</code>. Now I know what my go-to choice is when trying to concatenate strings.</p>
:ET